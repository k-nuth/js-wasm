import { OperationNative, OpcodeEnumNative } from './wasm/glue';
export declare class Operation {
    private opcode;
    private encoded;
    private minimal;
    private rawData;
    static fromNative(native: OperationNative, destroy?: boolean): Operation;
    static fromData(encoded: Uint8Array): Operation | undefined;
    static fromString(str: string): Operation | undefined;
    static isValid(encoded: Uint8Array, minimal: boolean): boolean;
    constructor();
    constructor(opcode: OpcodeEnumNative);
    constructor(encoded: Uint8Array, minimal?: boolean);
    toNative(): OperationNative;
    toString(activeForks: number): string;
    toData(): Uint8Array<ArrayBufferLike>;
    get isValid(): boolean;
    get serializedSize(): number;
    get code(): "push_size_0" | "push_size_1" | "push_size_2" | "push_size_3" | "push_size_4" | "push_size_5" | "push_size_6" | "push_size_7" | "push_size_8" | "push_size_9" | "push_size_10" | "push_size_11" | "push_size_12" | "push_size_13" | "push_size_14" | "push_size_15" | "push_size_16" | "push_size_17" | "push_size_18" | "push_size_19" | "push_size_20" | "push_size_21" | "push_size_22" | "push_size_23" | "push_size_24" | "push_size_25" | "push_size_26" | "push_size_27" | "push_size_28" | "push_size_29" | "push_size_30" | "push_size_31" | "push_size_32" | "push_size_33" | "push_size_34" | "push_size_35" | "push_size_36" | "push_size_37" | "push_size_38" | "push_size_39" | "push_size_40" | "push_size_41" | "push_size_42" | "push_size_43" | "push_size_44" | "push_size_45" | "push_size_46" | "push_size_47" | "push_size_48" | "push_size_49" | "push_size_50" | "push_size_51" | "push_size_52" | "push_size_53" | "push_size_54" | "push_size_55" | "push_size_56" | "push_size_57" | "push_size_58" | "push_size_59" | "push_size_60" | "push_size_61" | "push_size_62" | "push_size_63" | "push_size_64" | "push_size_65" | "push_size_66" | "push_size_67" | "push_size_68" | "push_size_69" | "push_size_70" | "push_size_71" | "push_size_72" | "push_size_73" | "push_size_74" | "push_size_75" | "push_one_size" | "push_two_size" | "push_four_size" | "push_negative_1" | "reserved_80" | "push_positive_1" | "push_positive_2" | "push_positive_3" | "push_positive_4" | "push_positive_5" | "push_positive_6" | "push_positive_7" | "push_positive_8" | "push_positive_9" | "push_positive_10" | "push_positive_11" | "push_positive_12" | "push_positive_13" | "push_positive_14" | "push_positive_15" | "push_positive_16" | "nop" | "reserved_98" | "if" | "notif" | "disabled_verif" | "disabled_vernotif" | "else" | "endif" | "verify" | "return" | "toaltstack" | "fromaltstack" | "drop2" | "dup2" | "dup3" | "over2" | "rot2" | "swap2" | "ifdup" | "depth" | "drop" | "dup" | "nip" | "over" | "pick" | "roll" | "rot" | "swap" | "tuck" | "cat" | "split" | "num2bin" | "bin2num" | "size" | "disabled_invert" | "and" | "or" | "xor" | "equal" | "equalverify" | "reserved_137" | "reserved_138" | "add1" | "sub1" | "disabled_mul2" | "disabled_div2" | "negate" | "abs" | "not" | "nonzero" | "add" | "sub" | "mul" | "div" | "mod" | "disabled_lshift" | "disabled_rshift" | "booland" | "boolor" | "numequal" | "numequalverify" | "numnotequal" | "lessthan" | "greaterthan" | "lessthanorequal" | "greaterthanorequal" | "min" | "max" | "within" | "ripemd160" | "sha1" | "sha256" | "hash160" | "hash256" | "codeseparator" | "checksig" | "checksigverify" | "checkmultisig" | "checkmultisigverify" | "nop1" | "nop2" | "checklocktimeverify" | "nop3" | "checksequenceverify" | "nop4" | "nop5" | "nop6" | "nop7" | "nop8" | "nop9" | "nop10" | "checkdatasig" | "checkdatasigverify" | "reverse_bytes" | "available1" | "available2" | "available3" | "input_index" | "active_bytecode" | "tx_version" | "tx_input_count" | "tx_output_count" | "tx_locktime" | "utxo_value" | "utxo_bytecode" | "outpoint_tx_hash" | "outpoint_index" | "input_bytecode" | "input_sequence_number" | "output_value" | "output_bytecode" | "utxo_token_category" | "utxo_token_commitment" | "utxo_token_amount" | "output_token_category" | "output_token_commitment" | "output_token_amount" | "reserved_212" | "reserved_213" | "reserved_214" | "first_undefined_op_value" | "reserved_215" | "reserved_216" | "reserved_217" | "reserved_218" | "reserved_219" | "reserved_220" | "reserved_221" | "reserved_222" | "reserved_223" | "reserved_224" | "reserved_225" | "reserved_226" | "reserved_227" | "reserved_228" | "reserved_229" | "reserved_230" | "reserved_231" | "reserved_232" | "reserved_233" | "reserved_234" | "reserved_235" | "reserved_236" | "reserved_237" | "reserved_238" | "reserved_239" | "special_token_prefix" | "reserved_240" | "reserved_241" | "reserved_242" | "reserved_243" | "reserved_244" | "reserved_245" | "reserved_246" | "reserved_247" | "reserved_248" | "reserved_249" | "reserved_250" | "reserved_251" | "reserved_252" | "reserved_253" | "reserved_254" | "reserved_255" | "invalidopcode";
    get data(): Uint8Array<ArrayBufferLike>;
    get isPush(): boolean;
    get isCounted(): boolean;
    get isVersion(): boolean;
    get isPositive(): boolean;
    isDisabled(activeForks: number): void;
    get isConditional(): boolean;
    get isRelaxedPush(): boolean;
    isOversized(maxSize: number): boolean;
    get isMinimalPush(): boolean;
    get isNominalPush(): boolean;
    static opcodeFromSize(size: number): OpcodeEnumNative;
    static minimalOpcodeFromData(data: Uint8Array): OpcodeEnumNative;
    static nominalOpcodeFromData(data: Uint8Array): OpcodeEnumNative;
    static opcodeFromPositive(value: number): OpcodeEnumNative;
    static opcodeToPositive(code: OpcodeEnumNative): number;
    static opcodeIsPush(code: OpcodeEnumNative): boolean;
    static opcodeIsPayload(code: OpcodeEnumNative): boolean;
    static opcodeIsCounted(code: OpcodeEnumNative): boolean;
    static opcodeIsVersion(code: OpcodeEnumNative): boolean;
    static opcodeIsNumeric(code: OpcodeEnumNative): boolean;
    static opcodeIsPositive(code: OpcodeEnumNative): boolean;
    static opcodeIsReserved(code: OpcodeEnumNative): boolean;
    static opcodeIsDisabled(code: OpcodeEnumNative, activeForks: number): boolean;
    static opcodeIsConditional(code: OpcodeEnumNative): boolean;
    static opcodeIsRelaxedPush(code: OpcodeEnumNative): boolean;
}
export default Operation;
